import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# crear df
df = pd.read_csv('final.csv')

# notna función maps elementos existentes con elementos verdaderos y no existentes a false 
# esta operación elmina filas mapeadas en false  
df = df[df['soup'].notna()]

# crear matríz / vector
count = CountVectorizer(stop_words='english')
count_matrix = count.fit_transform(df['soup'])

# similarity object : classifier
cosine_sim2 = cosine_similarity(count_matrix, count_matrix)

# resetear índice de dataframe
df = df.reset_index()
indices = pd.Series(df.index, index = df['original_title'])

def get_recommendations(title):
   idx = indices[title]
   sim_scores = list(enumerate(cosine_sim2[idx]))
   sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
   sim_scores = sim_scores[1:11]
   movie_indices = [i[0] for i in sim_scores]

   return df[['original_title','poster_link','runtime','release_date','weighted_rating']].iloc[movie_indices]
---------------------------------------------------------------------------------------------------------------------
import pandas as pd

# crear un dataframe usando el archivo final.csv 
df = pd.read_csv('final.csv')

# clasificar dataframe : wrt a weighted rating col en orden ascendente
df = df.sort_values('weighted_rating' , ascending = False)

# dataframe final
output = df[['original_title' , 'poster_link' , 'runtime', 'release_date' , 'weighted_rating' ]].head(20)
-------------------------------------------------------------------------------------------------------------

@app.route("/popular_movies")
def popular_movies():
    popular_movie_data = []

    for index, row in output.iterrows():
        _p = {
            "original_title": row['original_title'],
            "poster_link":row['poster_link'],
            "release_date":row['release_date'] or "N/A",
            "duration": row['runtime'],
            "rating": row['weighted_rating']/2
        }
        popular_movie_data.append(_p)

    return jsonify({
        "data": popular_movie_data,
        "status": "success"
    })
---------------------------------------------------------------------------------------------------
@app.route("/recommended_movies")
def recommended_movies():
    global liked_movies
    col_names=['original_title', 'poster_link', 'release_date', 'runtime', 'weighted_rating']
    all_recommended = pd.DataFrame(columns=col_names)
    
    for liked_movie in liked_movies:
        output = get_recommendations(liked_movie["original_title"])
        all_recommended=all_recommended.append(output)

    all_recommended.drop_duplicates(subset=["original_title"],inplace=True)

    recommended_movie_data=[]

    for index, row in all_recommended.iterrows():
        _p = {
            "original_title": row["original_title"],
            "poster_link":row['poster_link'],
            "release_date":row['release_date'] or "N/A",
            "duration": row['runtime'],
            "rating": row['weighted_rating']/2
        }
        recommended_movie_data.append(_p)

    return jsonify({
        "data":recommended_movie_data,
        "status": "success"
    })
